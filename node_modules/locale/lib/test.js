// Generated by CoffeeScript 1.6.3
(function() {
  var assert, defaultLocale, express, http, locale, server;

  http = require("http");

  assert = require("assert");

  express = require("express");

  locale = require("./");

  server = null;

  defaultLocale = locale.Locale["default"];

  before(function(callback) {
    var app;
    app = express();
    app.use(locale(["en-US", "fr", "en", "ja", "da-DK"]));
    app.get("/", function(req, res) {
      res.set("content-language", req.locale);
      res.set("Connection", "close");
      return res.send(200);
    });
    return server = app.listen(8000, callback);
  });

  describe("Defaults", function() {
    it("should use the environment language as default.", function(callback) {
      return http.get({
        port: 8000
      }, function(res) {
        assert.equal(res.headers["content-language"], defaultLocale);
        return callback();
      });
    });
    return it("should fallback to the default for unsupported languages.", function(callback) {
      return http.get({
        port: 8000,
        headers: {
          "Accept-Language": "es-ES"
        }
      }, function(res) {
        assert.equal(res.headers["content-language"], defaultLocale);
        return callback();
      });
    });
  });

  describe("Priority", function() {
    it("should fallback to a more general language if a country specific language isn't available.", function(callback) {
      return http.get({
        port: 8000,
        headers: {
          "Accept-Language": "en-GB"
        }
      }, function(res) {
        assert.equal(res.headers["content-language"], "en", "Unsupported country should fallback to countryless language");
        return callback();
      });
    });
    it("should use the highest quality language supported, regardless of order.", function(callback) {
      http.get({
        port: 8000,
        headers: {
          "Accept-Language": "en;q=.8, ja"
        }
      }, function(res) {
        return assert.equal(res.headers["content-language"], "ja", "Highest quality language supported should be used, regardless of order.");
      });
      return http.get({
        port: 8000,
        headers: {
          "Accept-Language": "fr-FR, ja-JA;q=0.5"
        }
      }, function(res) {
        assert.equal(res.headers["content-language"], "fr", "Highest quality language supported should be used, regardless of order.");
        return callback();
      });
    });
    it("should use a country specific language when an unsupported general language is requested", function(callback) {
      return http.get({
        port: 8000,
        headers: {
          "Accept-Language": "da"
        }
      }, function(res) {
        assert.equal(res.headers["content-language"], "da_DK");
        return callback();
      });
    });
    return it("should fallback to a country specific language even when there's a lower quality exact match", function(callback) {
      return http.get({
        port: 8000,
        headers: {
          "Accept-Language": "ja;q=.8, da"
        }
      }, function(res) {
        assert.equal(res.headers["content-language"], "da_DK");
        return callback();
      });
    });
  });

  after(function() {
    server.close();
    return process.exit(0)();
  });

}).call(this);
